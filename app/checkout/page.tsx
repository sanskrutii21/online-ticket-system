"use client"
import { useSearchParams, useRouter } from "next/navigation"
import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { supabase } from '@/lib/supabase'
import { useToast } from "@/components/ui/use-toast"

export default function CheckoutPage() {
  const searchParams = useSearchParams()
  const router = useRouter()
  const { toast } = useToast()
  
  const eventId = searchParams.get("eventId")
  const eventName = searchParams.get("eventName")
  const requestedTickets = Number.parseInt(searchParams.get("tickets") || "0")
  const totalPrice = Number.parseFloat(searchParams.get("totalPrice") || "0")
  
  const [name, setName] = useState("")
  const [email, setEmail] = useState("")
  const [isProcessing, setIsProcessing] = useState(false)

  const validateTicketAvailability = async () => {
    const { data: eventData, error: eventError } = await supabase
      .from('event')
      .select('tickets_available, tickets_booked')
      .eq('id', eventId)
      .single()

    if (eventError) throw new Error('Error fetching event data')
    if (!eventData) throw new Error('Event not found')

    const { tickets_available, tickets_booked } = eventData

    // Validate if enough tickets are available
    if (tickets_available < requestedTickets) {
      throw new Error(`Only ${tickets_available} tickets available`)
    }

    return {
      currentAvailable: tickets_available,
      currentBooked: tickets_booked
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsProcessing(true)

    try {
      // First verify ticket availability
      const { currentAvailable, currentBooked } = await validateTicketAvailability()

      // Calculate new values
      const newAvailableTickets = currentAvailable - requestedTickets
      const newBookedTickets = (currentBooked || 0) + requestedTickets

      // Begin transaction
      // 1. Create attendee record
      const { error: attendeeError } = await supabase
        .from('event_attendees')
        .insert([
          {
            event_id: eventId,
            name,
            email,
            tickets_booked: requestedTickets,
            price_paid: totalPrice,
            // Note: booked_at will be auto-generated by Supabase
          }
        ])

      if (attendeeError) throw new Error('Error creating attendee record')

      // 2. Update event tickets count
      const { error: updateError } = await supabase
        .from('event')
        .update({ 
          tickets_available: newAvailableTickets,
          tickets_booked: newBookedTickets
        })
        .eq('id', eventId)

      if (updateError) throw new Error('Error updating ticket count')

      // Show success message
      toast({
        title: "Booking Successful",
        description: `Thank you for your purchase! Your booking for ${requestedTickets} ticket(s) to ${eventName} has been confirmed.`,
      })

      // Delay redirection to allow the toast to be visible
      setTimeout(() => {
        router.push('/my-bookings') // Redirect to the my-bookings page
      }, 2000) // 2 seconds delay

    } catch (error) {
      console.error("Error processing booking:", error)
      toast({
        title: "Booking Failed",
        description: error instanceof Error ? error.message : "There was an error processing your booking. Please try again.",
        variant: "destructive"
      })
    } finally {
      setIsProcessing(false)
    }
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <Card>
        <CardHeader>
          <CardTitle>Checkout</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="mb-6">
            <h2 className="text-xl font-semibold mb-2">Order Summary</h2>
            <p>Event: {eventName}</p>
            <p>Tickets: {requestedTickets}</p>
            <p>Total Price: ${totalPrice.toFixed(2)}</p>
          </div>
          <form onSubmit={handleSubmit}>
            <div className="mb-4">
              <Label htmlFor="name">Name</Label>
              <Input
                type="text"
                id="name"
                value={name}
                onChange={(e) => setName(e.target.value)}
                required
                className="mt-1"
              />
            </div>
            <div className="mb-4">
              <Label htmlFor="email">Email</Label>
              <Input
                type="email"
                id="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
                className="mt-1"
              />
            </div>
            <Button 
              type="submit" 
              className="w-full"
              disabled={isProcessing}
            >
              {isProcessing ? "Processing..." : "Complete Purchase"}
            </Button>
          </form>
        </CardContent>
      </Card>
    </div>
  )
}